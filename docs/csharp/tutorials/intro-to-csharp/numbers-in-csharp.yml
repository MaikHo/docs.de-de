### YamlMime:Tutorial
title: Bearbeiten von Ganzzahlen und Gleitkommazahlen in C#
metadata:
  title: Zahlen in C# – Einführung in das interaktive C#-Tutorial
  description: In diesem Tutorial zu numerischen Typen verwenden Sie Ihren Browser, um sich interaktiv mit C# vertraut zu machen. Sie schreiben direkt im Browser einen C#-Code und sehen dort die Ergebnisse der Kompilierung und Ausführung Ihres Codes.
  audience: Developer
  ms.custom: mvc
  ms.date: 08/24/2018
  ms.topic: interactive-tutorial
  level: Beginner
  nextTutorialHref: branches-and-loops.yml
  nextTutorialTitle: Branches und Schleifen in C#
  displayType: two-column
  interactive: csharp
  ms.openlocfilehash: f9cfdf852546c30307f818418d7ff610b210d6f4
  ms.sourcegitcommit: 0100be20fcf23f61dab672deced70059ed71bb2e
  ms.translationtype: HT
  ms.contentlocale: de-DE
  ms.lasthandoff: 08/17/2020
  ms.locfileid: "88267931"
items:
- durationInMinutes: 1
  content: >
    Dieses interaktive Tutorial erläutert die numerischen Typen in C#, wobei Ihr Browser verwendet wird. Sie schreiben C#-Code und sehen die Ergebnisse der Kompilierung und Ausführung Ihres Codes. Es enthält eine Reihe von Lektionen, in denen Zahlen und arithmetische Operationen in C# untersucht werden. In diesen Lektionen lernen Sie die Grundlagen der Programmiersprache C# kennen.
- title: Erkunden von arithmetischen Operationen mit ganzen Zahlen
  durationInMinutes: 4
  content: >
    Führen Sie den folgenden Code im interaktiven Fenster aus. Wählen Sie die Schaltfläche **Enter focus mode** (Fokusmodus aktivieren) aus. Geben Sie anschließend den folgenden Codeblock in das interaktive Fenster ein, und wählen Sie **Ausführen** aus:


    ```csharp

    int a = 18;

    int b = 6;

    int c = a + b;

    Console.WriteLine(c);

    ```


    Wenn Sie an Ihrer Umgebung arbeiten, sollten Sie stattdessen die Anleitungen für die [lokale Version](numbers-in-csharp-local.md) befolgen.


    Sie haben eine der grundlegenden arithmetischen Operationen mit ganzen Zahlen kennengelernt. Der `int`-Typ steht für **integer**, d.h. eine positive oder negative ganze Zahl. Sie verwenden zum Addieren das `+`-Symbol. Zu den anderen häufig verwendeten arithmetischen Operationen für ganze Zahlen zählen Folgende:


    - `-` zur Subtraktion

    - `*` zur Multiplikation

    - `/` zur Division


    > [!TIP]

    > Im Rahmen dieses interaktiven Tutorials können Sie sich selbst mit dieser Operationen vertraut machen, indem Sie den Code, den Sie in das interaktive Fenster geschrieben haben, ändern. Dieses Tutorial stellt bei jedem Schritt Beispiele zur Verfügung, die Sie testen können.


    Erkunden Sie zunächst die anderen Operationen. Ändern Sie die dritte Zeile, um die einzelnen Operationen zu testen. Wählen Sie nach jeder Änderung die Schaltfläche **Ausführen** aus.


    Subtraktion:


    ```csharp

    int c = a - b;

    ```


    Multiplikation:


    ```csharp

    int c = a * b;

    ```


    Division:


    ```csharp

    int c = a / b;

    ```


    Wenn Sie möchten, können Sie auch experimentieren, indem Sie mehrere arithmetische Operationen in dieselbe Zeile schreiben.


    > [!TIP]

    > Bei Ihren ersten Schritten mit C# (oder einer anderen Programmiersprache) kann es zu Fehlern kommen, wenn Sie Codes schreiben. Der **Compiler** findet diese Fehler und meldet diese. Sollte die Ausgabe Fehlermeldungen enthalten, sehen Sie sich den Beispielcode und den Code im interaktiven Fenster an, um festzustellen, was behoben werden muss.

    > Durch diese Übung lernen Sie die Struktur eines C#-Codes kennen.
- title: Erkunden der Reihenfolge der Operationen
  durationInMinutes: 7
  content: >
    Die Programmiersprache C# definiert anhand von Regeln, die Sie aus der Mathematik kennen, die Rangfolge verschiedener arithmetischer Operationen.

    Multiplikation und Division haben gegenüber der Addition und Subtraktion Vorrang.

    Erkunden Sie dies, indem Sie den folgenden Code im interaktiven Fenster ausführen:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = a + b * c;

    Console.WriteLine(d);

    ```


    Die Ausgabe zeigt, dass vor der Addition die Multiplikation ausgeführt wurde.


    Sie können eine andere Operationsreihenfolge erzwingen, indem Sie die Operation bzw. die Operationen, die zuerst ausgeführt werden soll bzw. sollen, mit Klammern umschließen:


    ```csharp

    int a = 5;

    int b = 4;

    int c = 2;

    int d = (a + b) * c;

    Console.WriteLine(d);

    ```


    Machen Sie sich damit vertraut, indem Sie viele verschiedene Operationen kombinieren. Ersetzen Sie die vierte Zeile oben durch eine Zeile wie etwa Folgende:


    ```csharp

    int d = (a + b) - 6 * c + (12 * 4) / 3 + 12;

    ```


    Vielleicht haben Sie bereits ein interessantes Verhalten bei den ganzen Zahlen bemerkt. Bei der Division ganzer Zahlen kommt immer ein ganzzahliges Ergebnis heraus, selbst wenn Sie als Ergebnis einen Dezimal- oder Bruchteil erwarten würden.


    Wenn Sie dieses Verhalten noch nicht beobachtet haben, testen Sie den folgenden Code:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    Console.WriteLine(d);

    ```


    Wählen Sie erneut **Ausführen** aus, um die Ergebnisse anzuzeigen.
- title: Erkunden der Genauigkeit und Grenzwerte ganzer Zahlen
  durationInMinutes: 5
  content: >
    Im vorherigen Beispiel haben Sie gesehen, dass das Ergebnis bei der Division ganzer Zahlen abgeschnitten wird.

    Sie erhalten den **Restwert** mithilfe des **remainder**-Operators, dem `%`-Zeichen:


    ```csharp

    int a = 7;

    int b = 4;

    int c = 3;

    int d = (a + b) / c;

    int e = (a + b) % c;

    Console.WriteLine($"quotient: {d}");

    Console.WriteLine($"remainder: {e}");

    ```


    Der integer-C#-Typ unterscheidet sich noch in einem weiteren Punkt von einer mathematischen ganzen Zahl: Der `int`-Typ ist mit minimalen und maximalen Grenzwerten versehen. Führen Sie den folgenden Code im interaktiven Fenster aus, um diese Grenzwerte anzuzeigen:


    ```csharp

    int max = int.MaxValue;

    int min = int.MinValue;

    Console.WriteLine($"The range of integers is {min} to {max}");

    ```


    Wenn bei einer Berechnung ein Wert herauskommt, der diese Grenzwerte überschreitet, liegt eine **Unterlauf-** oder **Überlaufbedingung** vor. Die Antwort gibt dann den Bereich der Grenzwerte an. Fügen Sie im interaktiven Fenster die folgenden beiden Zeilen hinzu, um ein Beispiel anzuzeigen:


    ```csharp

    int what = max + 3;

    Console.WriteLine($"An example of overflow: {what}");

    ```


    Beachten Sie, dass die Antwort sehr nah an der minimalen (negativen) ganzen Zahl liegt. Sie entspricht `min + 2`.

    Die Additionsoperation hat die zulässigen Werte für ganze Zahlen **überlaufen**.

    Die Antwort enthält eine sehr große negative Zahl, da ein Überlauf den größtmöglichen ganzzahligen Wert bis zum kleinstmöglichen Wert umschließt.


    Wenn der `int`-Typ nicht Ihren Anforderungen entspricht, so gibt es verschiedene numerische Typen mit anderen Grenzwerten und Genauigkeitsgraden, die Sie verwenden können. Werfen wir im Folgenden einen Blick auf diese Typen von Zahlen.
- title: Arbeiten mit dem Double-Typ
  durationInMinutes: 5
  content: "Der numerische Typ `double` stellt eine Gleitkommazahl mit doppelter Genauigkeit dar. Falls Ihnen diese Benennungen nichts sagen, beachten Sie die folgenden Erläuterungen: Eine **Gleitkommazahl** wird verwendet, um sehr große oder sehr kleine Zahlen, die keine ganzen Zahlen sind, darzustellen. **Doppelte Genauigkeit** ist ein relativer Begriff, der die Anzahl der binären Ziffern beschreibt, die zum Speichern des Werts verwendet werden. Zahlen mit **doppelter Genauigkeit** besitzen die doppelte Anzahl von binären Ziffern wie Zahlen mit **einfacher Genauigkeit**. Bei modernen Computern werden häufiger Zahlen mit doppelter Genauigkeit verwendet statt mit einfacher Genauigkeit. Zahlen mit **einfacher Genauigkeit** werden mit dem Schlüsselwort `float` deklariert.\nSehen wir uns dies einmal genauer an. Testen Sie den folgenden Code im interaktiven Fenster, und sehen Sie sich das Ergebnis an:\n\n```csharp\ndouble a = 5;\ndouble b = 4;\ndouble c = 2;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nBeachten Sie, dass die Antwort die Dezimalzahl des Quotienten enthält. Testen Sie einen etwas komplizierteren Ausdruck mit Werten vom Typ „double“:\n\n```csharp\ndouble a = 19;\ndouble b = 23;\ndouble c = 8;\ndouble d = (a + b) / c;\nConsole.WriteLine(d);\n```\n\nDer Bereich eines Werts vom Typ „double“ ist weitaus größer als bei ganzzahligen Werten. Testen Sie den folgenden Code im interaktiven Fenster:\n\n```csharp\ndouble max = double.MaxValue;\ndouble min = double.MinValue;\nConsole.WriteLine($\"The range of double is {min} to {max}\");\n```\n\nDiese Werte werden in der wissenschaftlichen Schreibweise ausgegeben. Die Zahl links von `E` ist die Mantisse. Die Zahl rechts ist der Exponent als Potenz von 10.\n\nWie bei Dezimalzahlen in der Mathematik können double-Werte in C# Rundungsfehler aufweisen. Testen Sie den folgenden Code:\n\n```csharp\ndouble third = 1.0 / 3.0;\nConsole.WriteLine(third);\n```\n\nDenken Sie daran, dass `0.3` gleich `3/10` ist und nicht exakt `1/3` entspricht. Auf ähnliche Weise ist `0.33` gleich `33/100`. Das ist näher an `1/3`, aber immer noch nicht exakt. \n\n***Übung***\n\nTesten Sie für den `double`-Typ andere Berechnungen mit großen und kleinen Zahlen sowie mit Multiplikation und Division.  Testen Sie kompliziertere Berechnungen.\n"
- title: Arbeiten mit Dezimaltypen
  durationInMinutes: 8
  content: >
    Sie haben die grundlegenden numerischen Typen in C# – „integer“ und „double“ – kennengelernt.  Es gibt einen weiteren Typ, den Sie kennen sollten: den `decimal`-Typ. Der `decimal`-Typ weist einen kleineren Bereich als `double` auf, aber eine höhere Genauigkeit. Sehen wir uns das einmal genauer an:


    ```csharp

    decimal min = decimal.MinValue;

    decimal max = decimal.MaxValue;

    Console.WriteLine($"The range of the decimal type is {min} to {max}");

    ```


    Beachten Sie, dass der Bereich kleiner ist als beim `double`-Typ. Sie können sehen, dass die Genauigkeit beim Typ „decimal“ höher ist, wenn Sie den folgenden Code testen:


    ```csharp

    double a = 1.0;

    double b = 3.0;

    Console.WriteLine(a / b);


    decimal c = 1.0M;

    decimal d = 3.0M;

    Console.WriteLine(c / d);

    ```


    Mit dem Suffix `M` neben einer Zahl geben Sie an, dass eine Konstante den `decimal`-Typ verwenden soll.


    Beachten Sie, dass der aus dieser arithmetischen Operation resultierende Wert vom Typ „decimal“ rechts neben dem Dezimalpunkt mehr Ziffern enthält.


    Mit dem Suffix `M` neben einer Zahl geben Sie an, dass eine Konstante den `decimal`-Typ verwenden soll. Andernfalls nimmt der Compiler den Typ `double` an.


    > [!NOTE]

    > Der Buchstabe `M` wurde als visuell eindeutigster Buchstabe zur Unterscheidung zwischen den Schlüsselwörtern `double` und `decimal` ausgewählt.


    ***Übung***


    Nachdem Sie nun die verschiedenen numerischen Typen kennengelernt haben, schreiben Sie Code, der den Flächeninhalt eines Kreises mit einem Radius von 2,5 cm berechnet. Denken Sie daran, dass der Flächeninhalt eines Kreises durch das Quadrat des Radius multipliziert mit Pi gebildet wird. Hinweis: .NET bietet eine Konstante für Pi (<xref:System.Math.PI?displayProperty=nameWithType>), die Sie für die Berechnung dieses Werts verwenden können. <xref:System.Math.PI?displayProperty=nameWithType>, wie alle im `System.Math`-Namespace deklarierten Konstanten, ist ein `double`-Wert. Aus diesem Grund sollten Sie `double` anstelle von `decimal`-Werten für diese Aufgabe verwenden.


    Sie sollten eine Antwort zwischen 19 und 20 erhalten.
- title: Übung abgeschlossen
  durationInMinutes: 1
  content: >
    Sieht ihr Code ungefähr wie der Folgende aus?


    ```csharp

    double radius = 2.50;

    double area = Math.PI * radius * radius;

    Console.WriteLine(area);

    ```


    Wenn Sie möchten, testen Sie andere Formeln.
- content: >-
    Sie haben das interaktive Tutorial „Zahlen in C#“ abgeschlossen. Wählen Sie unten den Link **Verzweigungen und Schleifen** aus, um das nächste interaktive Tutorial zu starten, oder besuchen sie die [.NET-Website](https://dotnet.microsoft.com/learn/dotnet/hello-world-tutorial/intro), um das .NET Core SDK herunterzuladen, ein Projekt auf Ihrem Computer zu erstellen und weiter zu programmieren. Über den Abschnitt „Nächste Schritte“ gelangen Sie wieder zu diesen Tutorials.


    Weitere Informationen zu Zahlen in C# finden Sie auch in folgenden Artikeln:


    - [Integrale numerische Typen](../../language-reference/builtin-types/integral-numeric-types.md)

    - [Numerische Gleitkommatypen](../../language-reference/builtin-types/floating-point-numeric-types.md)

    - [Integrierte numerischer Konvertierungen](../../language-reference/builtin-types/numeric-conversions.md)
